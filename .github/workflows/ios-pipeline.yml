name: iOS Pipeline  

on:  
  push:  
    branches: [ main ]  
  pull_request:  
    branches: [ main ]  

env:  
  DEVELOPER_APP_ID: ${{ secrets.DEVELOPER_APP_ID }}  
  DEVELOPER_APP_IDENTIFIER: ${{ secrets.DEVELOPER_APP_IDENTIFIER }}  
  PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}  
  TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}  
  TEMP_KEYCHAIN_USER: ${{ secrets.TEMP_KEYCHAIN_USER }}  
  APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}  
  APPLE_KEY_ISSUER_ID: ${{ secrets.APPLE_KEY_ISSUER_ID }}  
  APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }}  
  CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}  
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}  
  MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}  

jobs:  
  deploy:  
    name: Deploy to TestFlight  
    runs-on: macos-latest  
    
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v3  

      - name: Install Apple Certificate  
        if: success()  
        env:  
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}  
          P12_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}  
          KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}  
        run: |  
          # Create temporary keychain  
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain  
          security default-keychain -s build.keychain  
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain  
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain  

          # Import certificate to keychain  
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12  
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign  
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain  

      - name: Set up Ruby  
        uses: ruby/setup-ruby@v1  
        with:  
          ruby-version: '3.1.0'  
          bundler-cache: true  

      - name: Install Bundler  
        run: gem install bundler  

      - name: Install gems  
        run: |  
          bundle config path vendor/bundle  
          bundle install --jobs 4 --retry 3  

      - name: Install CocoaPods  
        run: |  
          pod install  

      - name: Setup Fastlane Match  
        env:  
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}  
        run: |  
          echo "Creating temporary keychain"  
          security create-keychain -p "" ios-build.keychain  
          security list-keychains -s ios-build.keychain  
          security default-keychain -s ios-build.keychain  
          security unlock-keychain -p "" ios-build.keychain  
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/ios-build.keychain  

      - name: Setup provisioning profile  
        env:  
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}  
        run: |  
          # Create and copy provisioning profile  
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $RUNNER_TEMP/provisioning_profile.mobileprovision  
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles  
          cp $RUNNER_TEMP/provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/  

      - name: Build and Deploy to TestFlight  
        env:  
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}  
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}  
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}  
        run: |  
          bundle exec fastlane beta  

      - name: Clean up keychain  
        if: always()  
        run: |  
          security delete-keychain ios-build.keychain || true  
          security default-keychain -s login.keychain  

      - name: Upload build artifacts  
        if: success()  
        uses: actions/upload-artifact@v3  
        with:  
          name: build-logs  
          path: |  
            ~/Library/Logs/gym/*.log  
            *.ipa  
            *.dSYM.zip  

      - name: Upload build logs on failure  
        if: failure()  
        uses: actions/upload-artifact@v3  
        with:  
          name: build-logs-failure  
          path: ~/Library/Logs/gym/*.log